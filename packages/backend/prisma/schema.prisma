// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuestionnaireResponses {
  id                   Int            @id @default(autoincrement())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  questionnaireVersion Int
  questions            Json
  questionnaire        Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId      Int
  user                 User           @relation(fields: [userId], references: [id])
  userId               Int
  order                Json
  answers              Json
}

enum QuestionType {
  singleChoice
  multipleChoice
  fillBlank
  judgement
  shortAnswer
  essay
  fileUpload
}

model Question {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subject         String         @db.VarChar(255)
  type            QuestionType
  settings        Json
  options         Json
  answers         Json
  analyze         String?        @default("") @db.Text()
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId Int
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
}

model QuestionnaireTag {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String         @db.VarChar(255)
  beColor         String         @db.VarChar(255)
  textColor       String         @db.VarChar(255)
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId Int?
}

model Questionnaire {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  paperName              String                   @db.VarChar(255)
  settings               Json
  status                 Int?                     @default(0)
  type                   Int?                     @default(0)
  version                Int                      @default(0)
  tags                   QuestionnaireTag[]
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  questions              Question[]
  QuestionnaireResponses QuestionnaireResponses[]
}

model GithubInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  githubId  String   @unique @db.VarChar(255)
  jsonData  Json
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  username               String?                  @unique @db.VarChar(255)
  nickname               String?                  @default("user") @db.VarChar(255)
  password               String?                  @db.VarChar(255)
  sex                    Int                      @default(0)
  questionnaires         Questionnaire[]
  questionnaireTags      QuestionnaireTag[]
  githubInfo             GithubInfo?
  questions              Question[]
  QuestionnaireResponses QuestionnaireResponses[]
}
